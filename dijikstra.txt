#include <stdio.h>
#include <conio.h>
#define MAX 10
#define INF 9999
int minDistance(int dist[], int visited[], int n) {
    int i, min = INF, min_index = -1;
    for (i = 0; i < n; i++) {
        if (!visited[i] && dist[i] <= min) {
            min = dist[i];
            min_index = i;
        }
    }
    return min_index;
}

void dijkstra(int graph[MAX][MAX], int src, int n) {
    int dist[MAX], visited[MAX];
    int i, v, count;

    for (i = 0; i < n; i++) {
        dist[i] = INF;
        visited[i] = 0;
    }
 dist[src] = 0;
for (count = 0; count < n - 1; count++) {
        int u = minDistance(dist, visited, n);
        visited[u] = 1;
        for (v = 0; v < n; v++) {
            if (!visited[v] && graph[u][v] && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }
    printf("\nVertex\tDistance from Source %d\n", src);
    for (i = 0; i < n; i++) {
        printf("%d\t%d\n", i, dist[i]);
    }
}

void main() {
    int graph[MAX][MAX], n, i, j, src;
    clrscr();
    printf("Enter number of vertices (max %d): ", MAX);
    scanf("%d", &n);
    printf("Enter adjacency matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }
    printf("Enter source vertex (0 to %d): ", n - 1);
    scanf("%d", &src);
    dijkstra(graph, src, n);
    getch();
}
